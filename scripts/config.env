# AgentX Proxy 测试配置
# 可以通过 source 此文件加载配置

# 服务器配置
export SERVER_HOST="127.0.0.1"
export CONTROL_PORT="17001"
export PROXY_PORT="17002"
export PUBLIC_PORT="17003"
export POOL_SIZE="3"

# 测试配置
export TEST_DURATION="30"
export CONCURRENT_USERS="10"
export RUST_LOG="info"

# 客户端配置
export DEFAULT_CLIENT_ID="demo-client"
export COMMAND_MODE="false"
export ENABLE_MCP="false"
export MCP_PORT="9021"

# 日志配置
export LOG_DIR="/tmp/agentx_logs"
export LOG_LEVEL="info"

# 测试服务配置
export TEST_WEB_PORT="3000"
export TEST_API_PORT="8000"
export TEST_DB_PORT="5432"
export TEST_CLAUDE_PORT="8080"

# 数据库模拟配置
export MOCK_DB_TYPE="postgresql"
export MOCK_DB_NAME="testdb"
export MOCK_DB_USER="testuser"
export MOCK_DB_PASSWORD="testpass"

# Claude 配置
export CLAUDE_ENABLED="false"
export CLAUDE_PATH=""
export CLAUDE_MODEL="claude-3-sonnet-20240229"

# 性能测试配置
export BENCHMARK_ITERATIONS="3"
export BENCHMARK_WARMUP="1"
export BENCHMARK_OUTPUT_JSON="true"

# 创建日志目录
mkdir -p $LOG_DIR

# 颜色输出
if [ -t 1 ]; then
    export COLOR_RED='\033[0;31m'
    export COLOR_GREEN='\033[0;32m'
    export COLOR_YELLOW='\033[1;33m'
    export COLOR_BLUE='\033[0;34m'
    export COLOR_NC='\033[0m'
else
    export COLOR_RED=''
    export COLOR_GREEN=''
    export COLOR_YELLOW=''
    export COLOR_BLUE=''
    export COLOR_NC=''
fi

# 帮助函数
agentx_log_info() {
    echo -e "${COLOR_BLUE}[INFO]${COLOR_NC} $1"
}

agentx_log_success() {
    echo -e "${COLOR_GREEN}[SUCCESS]${COLOR_NC} $1"
}

agentx_log_warning() {
    echo -e "${COLOR_YELLOW}[WARNING]${COLOR_NC} $1"
}

agentx_log_error() {
    echo -e "${COLOR_RED}[ERROR]${COLOR_NC} $1"
}

# 检查端口是否可用
agentx_check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

# 等待端口就绪
agentx_wait_port() {
    local port=$1
    local max_attempts=10
    local attempt=0

    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:$port >/dev/null 2>&1; then
            return 0
        fi
        sleep 1
        attempt=$((attempt + 1))
    done

    return 1
}

# 启动测试服务
agentx_start_test_service() {
    local port=$1
    local name=$2
    local dir=${3:-"/tmp"}

    agentx_log_info "启动测试服务 '$name' 在端口 $port..."

    # 创建简单的 HTTP 服务器
    cat > $dir/test_server_$port.py <<EOF
import http.server
import socketserver
import json
import os
from datetime import datetime

class AgentXTestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "status": "ok",
                "service": "$name",
                "port": $port,
                "pid": os.getpid(),
                "time": datetime.now().isoformat()
            }
            self.wfile.write(json.dumps(response, indent=2).encode())
        elif self.path == '/info':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = {
                "name": "$name",
                "port": $port,
                "client_id": os.environ.get('CLIENT_ID', 'unknown'),
                "server_host": os.environ.get('SERVER_HOST', 'unknown')
            }
            self.wfile.write(json.dumps(response, indent=2).encode())
        else:
            super().do_GET()

    def log_message(self, format, *args):
        pass

with socketserver.TCPServer(("127.0.0.1", $port), AgentXTestHandler) as httpd:
    print(f"服务 '$name' 运行在端口 $port")
    httpd.serve_forever()
EOF

    python3 $dir/test_server_$port.py > $LOG_DIR/test_server_$port.log 2>&1 &
    echo $! > $dir/test_server_$port.pid

    agentx_log_success "测试服务已启动 (PID: $(cat $dir/test_server_$port.pid))"
}

# 停止测试服务
agentx_stop_test_service() {
    local port=$1
    local dir=${2:-"/tmp"}

    if [ -f $dir/test_server_$port.pid ]; then
        local pid=$(cat $dir/test_server_$port.pid)
        if kill -0 $pid 2>/dev/null; then
            kill $pid 2>/dev/null || true
            agentx_log_info "已停止端口 $port 的测试服务"
        fi
        rm -f $dir/test_server_$port.pid
    fi
}

# 生成客户端 ID
agentx_gen_client_id() {
    local prefix=${1:-"client"}
    echo "${prefix}-$(date +%s)-$((RANDOM % 1000))"
}

# 运行命令并记录日志
agentx_run_with_log() {
    local cmd=$1
    local log_file=$2

    agentx_log_info "执行: $cmd"
    eval $cmd > $log_file 2>&1 &
    local pid=$!
    echo $pid
}

# 等待进程结束
agentx_wait_process() {
    local pid=$1
    local timeout=${2:-30}

    local count=0
    while kill -0 $pid 2>/dev/null && [ $count -lt $timeout ]; do
        sleep 1
        count=$((count + 1))
    done

    if kill -0 $pid 2>/dev/null; then
        agentx_log_warning "进程 $pid 仍在运行"
        return 1
    else
        agentx_log_success "进程 $pid 已结束"
        return 0
    fi
}

# 清理所有 AgentX 进程
agentx_cleanup() {
    agentx_log_info "清理 AgentX 进程..."

    pkill -f "cargo run -p arps" 2>/dev/null || true
    pkill -f "cargo run -p arpc" 2>/dev/null || true
    pkill -f "arpc" 2>/dev/null || true
    pkill -f "python3 -m http.server" 2>/dev/null || true
    pkill -f "python3 /tmp/test_server" 2>/dev/null || true
    pkill -f "nc -l" 2>/dev/null || true

    rm -f /tmp/test_server_*.pid
    rm -f /tmp/arps.pid
    rm -f /tmp/arpc_*.pid

    agentx_log_success "清理完成"
}

# 显示配置信息
agentx_show_config() {
    echo ""
    echo "AgentX Proxy 配置"
    echo "=================="
    echo "服务器地址: $SERVER_HOST"
    echo "控制端口: $CONTROL_PORT"
    echo "代理端口: $PROXY_PORT"
    echo "公网端口: $PUBLIC_PORT"
    echo "连接池大小: $POOL_SIZE"
    echo "测试持续时间: $TEST_DURATION s"
    echo "并发用户数: $CONCURRENT_USERS"
    echo "日志目录: $LOG_DIR"
    echo "RUST 日志: $RUST_LOG"
    echo ""
}

# 验证环境
agentx_validate_env() {
    local errors=0

    agentx_log_info "验证环境..."

    # 检查 cargo
    if ! command -v cargo &> /dev/null; then
        agentx_log_error "Cargo 未安装"
        errors=$((errors + 1))
    fi

    # 检查项目
    if [ ! -f "Cargo.toml" ]; then
        agentx_log_error "未找到 Cargo.toml，请在项目根目录运行"
        errors=$((errors + 1))
    fi

    # 检查必要工具
    for tool in curl python3 bc; do
        if ! command -v $tool &> /dev/null; then
            agentx_log_warning "$tool 未安装（某些功能可能不可用）"
        fi
    done

    if [ $errors -eq 0 ]; then
        agentx_log_success "环境验证通过"
        return 0
    else
        agentx_log_error "环境验证失败，发现 $errors 个错误"
        return 1
    fi
}

# 主函数（用于测试）
agentx_test_config() {
    agentx_show_config
    agentx_validate_env

    echo ""
    agentx_log_info "配置加载完成"
    echo "使用方法:"
    echo "  source scripts/config.env"
    echo "  agentx_log_info 'Hello World'"
    echo ""
}
